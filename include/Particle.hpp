#pragma once

#include "MeasuresAndStates.hpp"
#include <TLorentzVector.h>
#include <TMatrixD.h>
#include <TVector3.h>

/**
 * The particle class.
 *
 * It represents a single particle generated by the particle gun.
 * It has a vector containing all the positions reached by the simulation.
 */
class Particle {
public:
  /**
   * The constructor
   *
   * It instantiate a Particle object with its inital momentum and position.
   * The mass of the particle can be determined from its momentum.
   *
   * @param initialPosition the poisition at which the particle is generated.
   * @param initialVelocity the momentum of the particle at its generation.
   * @param mass the mass of the particle.
   * @param charge the charge of the particle.
   */
  Particle(TLorentzVector initialPosition, TVector3 velocity, double mass,
           double charge = 0.);

  ParticleState getInitialState() const { return initialState; }

  /**
   * The space evolution function.
   *
   * It evolves the particle to the desired z position.
   * It than adds the new position to the vector.
   *
   * @param preaviousState the state before the evolution.
   * @param finalZ the position in meters.
   *
   * @return the new state after the evolution.
   */
  ParticleState
  zSpaceEvolve(ParticleState preaviousState, double finalZ,
               bool multipleScattering = true,
               std::optional<int> detectorId = std::nullopt) const;

private:
  ParticleState initialState;

  const double mass;
  const double charge;
};
