* 2024/02/27 Initial setup
* 2020/02/29 Chosen uml editor
* 2024/03/02 Created main classes for simulation and coordinate systems
* 2024/03/04 Started implementing simulation. Had an idea about the time evolution
  I can make the particle evolve using a fixed time-step. This is chosen to be the minimum time taken by the light to pass through a detector (which now has a depth). In this way the particles can evolve independently of the detectors and linear approximations can be made. It is also faster to compute (I think)
  I should ask Bellan
* 2024/03/05 Reverted to space evolution and integration of Root Physics library into the project for vectors.
  Prof. Bellan suggested evolving the particle position using the final position of the detectors, since they are (at least for now) aligned along the z axis.
  Maybe in the future, once we need to implement magnetic fields, the idea above could be applied (prof Bellan told me that it is the standard in complex symulations, but can be a mess to program from scrach).
  Started documenting the project and integrating the ROOT Physics library with its vectors (they are pretty useful :) ).
  However I find it can be difficult to work without measuremnt systems. *I could implement some dimentions classes in the future* (e.g. time or space).
** Inserted a reset counter in the detector. *I should reflect on how to separate the simulation from the reconstruction*.
** ( ) TODO in the near future
   - (x) Generate random momenta 
   - (x) Save data
   - (-) Create experiment generator
   - (x) Finish assembling the simulation
   - (x) Fix linking problems
** Once this is done you can start building the tracking system.
* 2024/03/06 Morning. I had an Idea: to calculate the angle of colatitude, you can just take the dot product normalized.
* 2024/03/07 Generated random particle. Fixed linking (vdt library was needed). Added factory. Added file saving.
** TODO in the near future
   - (x) Consider the angle range in the particle generator
   - (x) Test that the saved data is actually usable
 ** Started building tracking system
    - Open the file with all the measurements and load them in a single vector
    - Load the information about the position of the detectors in a vector of detectors 
    -- *There should be some indication of the uncertainty of the detectors*
    -- Consider creating a new class of detectors or implement all the functionalities in the same class
    - Divide the measuremnts into separate vectors based on the corresponding detector
    -- Order each vector based on the time of the detection
    -- (Check if the lenghts of the vectors match. Won't solve my problems)
    - Do a while loop until you don't have any more data (just in the first detector's vector)
    - Take as input a prediction of the source of the particles (I guess it's not a good idea)
    - Take as input the model of evolution of the particles
    - Generate a state vector. It must contain:
    -- The position (4d) and the momentum (4d)
    -- The covariance matrix (8x8) initially with high (possibly infinite) values
    - Take the measuremnt with least time (to decide whether to ceck in general or just for the first detector)
    - Apply kalman filter to generate the new state (on the first detector)
    - Save that state in a vector corresponding to the particle (inside a vector of all the particles)
    - Repeat for the second detector
    - Create a for loop on the remaining detectors
    -- Estimate whether the particle will impact on the next detector. If it doesn't, skip (maybe look for a different time measure?).
    -- If it does apply kalman filter to the measuremente and add the datum to the vector.
    - Cycle through each particle's vector of states and apply smoothing
    - Calculate the position at z = 0 to determine the position of the cannon (useless in the future)
** Assumptions
   - The first two detector are always hit (used to determine whether to skip the next ones), otherwise none must be.
   - The first two measurements are enough to estimate whether the next detector will be hit.
* 2024/04/26
** Fixed the angle range issue
** Now every particle should be detected
** TODO maybe later
   - ( ) Control if the detectors are aligned properly or if they should be ignored (a problem when you start introducing shifted detectors)
** There are problems with roundings. I think the best option is to save data in a smart way and do the kalman filter with a variable number of detectors (not what I hoped for)
